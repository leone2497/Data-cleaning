# In[1]:


import os


# In[6]:


path='C:\\Users\\Mattia\\Desktop\\analytics'


# In[10]:


os.path.exists(path)


# In[16]:


os.getcwd()
#let's see the directory we are working with


# In[18]:


os.chdir(r'C:\Users\Mattia\Desktop\analytics')
#let's change the directory
#r because we have escaping character


# In[19]:


os.getcwd()


# In[20]:


os.mkdir('project_os')
#create a directory inside the directory we are working with


# In[21]:


os.listdir()
#list of files inside our working directory


# In[26]:


os.chdir(r'C:\Users\Mattia\Desktop\analytics\project_os')
os.getcwd()


# In[50]:


os.listdir()


# In[23]:


import pandas as pd


# In[32]:


Path_directory=  r'C:\Users\Mattia\Desktop\analytics\project_os'


# In[60]:


Path_file=os.path.join(Path_directory,'amazon.csv')
#heck if the delimiter used in your CSV file matches the one specified in the pd.read_csv() function.
#The default delimiter is a comma (,), but you can specify a different one using the sep parameter.
#If you don't do that you can have an error


# In[61]:


print(Path_file)


# In[334]:


Amazon_database=pd.read_csv(Path_file)


# In[335]:


Amazon_database


# In[71]:


Amazon_database.info


# In[73]:


Amazon_database['actual_price'].dtype


# In[270]:


result_split = Amazon_database['category'].str.split('|', 3, expand=True)
print(result_split)


# In[337]:


Amazon_database[['Category 1','Category 2','Category 3','Category 4']]= Amazon_database['category'].str.split('|',3,expand=True)
#create for column for the split of the columns. [[]] is because the square brackets are used to create a new DataFrame with only the specified columns. Without the double brackets, you would be assigning a single-column DataFrame to the original DataFrame, which may not behave as expected.


# In[338]:


Amazon_database.drop('category', axis=1, inplace=True)


# In[339]:


def replace_value(Column, character_to_be_replaced, new_character):
    Amazon_database[Column] = Amazon_database[Column].str.replace(character_to_be_replaced, new_character)
#let's do data cleaning with numbers, we need the number with , and without symbols


# In[340]:


replace_value('discounted_price', '₹', '')


# In[341]:


replace_value('actual_price', '₹', '')


# In[342]:


replace_value('actual_price', ',', '.')


# In[343]:


replace_value('discounted_price', ',', '.')


# In[344]:


replace_value('rating_count', ',', '.')


# In[345]:


Amazon_database


# In[346]:


def column_converter(Column):
    Amazon_database[Column] = pd.to_numeric(Amazon_database[Column], errors='coerce')
    print(Amazon_database[Column].dtype)


# In[347]:


column_converter('discounted_price')


# In[348]:


column_converter('rating')


# In[349]:


column_converter('rating_count')


# In[350]:


column_converter('actual_price')


# In[351]:


replace_value('discount_percentage', '%', '')
column_converter('discount_percentage')


# In[352]:


Amazon_database['discount_percentage']=Amazon_database['discount_percentage']/100


# In[353]:


Amazon_database


# In[354]:


print('The most discounted product is '+Amazon_database.loc[Amazon_database['discount_percentage'].idxmax(),'product_name'])


# In[355]:


def max_value(return_value, what_you_want_to_see, filter_value):
    print('The most '+ what_you_want_to_see+' product is '+Amazon_database.loc[Amazon_database[filter_value].idxmax(), return_value])


# In[356]:


max_value('product_name','expensive','actual_price')


# In[357]:


max_value('product_name','expensive but in discount','discounted_price')


# In[358]:


Amazon_database['product_name'].unique()


# In[359]:


def select_value(return_value, filter_value,value):
    list_of_product= Amazon_database.loc[Amazon_database[filter_value]>=value, return_value]
    return list_of_product


# In[360]:


select_value('product_name','rating',4)


# In[361]:


Amazon_database['product_name'].duplicated().any()
#return true if one value of the series is a duplicated value


# In[362]:


duplicated_value= Amazon_database['product_name'].duplicated(keep=False)


# In[363]:


duplicated_value


# In[364]:


duplicated_rows = Amazon_database[duplicated_value]


# In[365]:


duplicated_rows


# In[ ]:


len(Amazon_database.loc[duplicated_value,'product_name'].unique())
#let's see if we have duplicated value in product name


# In[368]:


Amazon_database.isnull().any()
#let's see if there are null values in the column 


# In[441]:


Amazon_database.dropna()


# In[442]:


len(Amazon_database)


# In[443]:


def group_function(column,filter_value,operation):
    variable_1=pd.DataFrame(Amazon_database.groupby(column)[filter_value].agg(operation))
    return variable_1


# In[444]:


Total_sales_for_product=group_function('product_name','actual_price',sum)


# In[445]:


Total_sales_for_product


# In[446]:


import matplotlib.pyplot as mat


# In[447]:


product_price= Amazon_database[['Category 1','actual_price']]
#If you want to create a new DataFrame that includes only these two columns, use double square bracket


# In[448]:


product_price


# In[449]:


Group_category_1=pd.DataFrame(product_price.groupby('Category 1')['actual_price'].agg(max))
#let's the maxim price for each category


# In[450]:


G_c1=pd.DataFrame(Group_category_1)


# In[451]:


G_c1.index


# In[452]:


G=pd.DataFrame(G_c1.reset_index())


# In[453]:


G


# In[454]:


mat.bar(G['Category 1'],G['actual_price'])
mat.xlabel('Category')
mat.ylabel('Actual price')
mat.title('Histogram of Actual Prices')
mat.xticks(rotation=90,fontsize=8)
mat.show()
#mat.xticks(rotation=90,fontsize=8) help us with the size of the x element and the rotation to better see each elements label avoiding overlapping


# In[455]:


mat.hist(Amazon_database['Category 1'], color='red')
mat.xlabel('Category')
mat.ylabel('Count product')
mat.title('Number of product for category 1')
mat.xticks(rotation=90,fontsize=8)
mat.show()
